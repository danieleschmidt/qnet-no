# Docker Compose for QNet-NO Distributed Quantum Computing
version: '3.8'

services:
  # Main QNet-NO application
  qnet-no-main:
    build: .
    container_name: qnet-no-main
    environment:
      - QNET_ENV=production
      - QNET_LOG_LEVEL=INFO
      - QNET_NODE_ID=0
      - QNET_ROLE=coordinator
      - CUDA_VISIBLE_DEVICES=0
    volumes:
      - ./logs:/app/logs
      - ./cache:/app/cache
      - ./data:/app/data
      - ./models:/app/models
    ports:
      - "8000:8000"
      - "8080:8080"  # Web interface
    networks:
      - qnet-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    restart: unless-stopped

  # Quantum compute node 1
  qnet-no-node1:
    build: .
    container_name: qnet-no-node1
    environment:
      - QNET_ENV=production
      - QNET_LOG_LEVEL=INFO
      - QNET_NODE_ID=1
      - QNET_ROLE=worker
      - QNET_COORDINATOR_HOST=qnet-no-main
      - CUDA_VISIBLE_DEVICES=1
    volumes:
      - ./logs:/app/logs
      - ./cache:/app/cache
    ports:
      - "8001:8000"
    networks:
      - qnet-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    depends_on:
      - qnet-no-main
    restart: unless-stopped

  # Quantum compute node 2
  qnet-no-node2:
    build: .
    container_name: qnet-no-node2
    environment:
      - QNET_ENV=production
      - QNET_LOG_LEVEL=INFO
      - QNET_NODE_ID=2
      - QNET_ROLE=worker
      - QNET_COORDINATOR_HOST=qnet-no-main
      - CUDA_VISIBLE_DEVICES=2
    volumes:
      - ./logs:/app/logs
      - ./cache:/app/cache
    ports:
      - "8002:8000"
    networks:
      - qnet-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    depends_on:
      - qnet-no-main
    restart: unless-stopped

  # Redis for caching and message passing
  redis:
    image: redis:7-alpine
    container_name: qnet-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - qnet-network
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    restart: unless-stopped

  # PostgreSQL for experiment tracking
  postgres:
    image: postgres:15-alpine
    container_name: qnet-postgres
    environment:
      - POSTGRES_DB=qnet_experiments
      - POSTGRES_USER=qnet
      - POSTGRES_PASSWORD=quantum_neural_ops_2024
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - qnet-network
    restart: unless-stopped

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: qnet-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - qnet-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: qnet-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=quantum_viz_2024
    networks:
      - qnet-network
    depends_on:
      - prometheus
    restart: unless-stopped

networks:
  qnet-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local